# GitLab CI pipeline: build on master and publish a Release with JAR asset

stages:
  - build
  - release

variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  JAR_PATH: "app/build/libs/gabia-dev-mcp-server-1.0.0.jar"

cache:
  key: "${CI_PROJECT_PATH}-gradle-cache"
  paths:
    - .gradle/wrapper
    - .gradle/caches

build:
  stage: build
  image: gradle:8.8.0-jdk17
  rules:
    - if: "$CI_COMMIT_BRANCH == 'master'"
  script: |
    ./gradlew --version
    ./gradlew clean build
    test -f "$JAR_PATH" || (echo "Missing jar: $JAR_PATH" && exit 1)
  artifacts:
    name: "gabia-dev-mcp-server-${CI_COMMIT_SHORT_SHA}"
    expire_in: 1 week
    when: on_success
    paths:
      - "$JAR_PATH"

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: "$CI_COMMIT_BRANCH == 'master'"
  needs:
    - job: build
      artifacts: true
  variables:
    TAG_NAME: "release-${CI_COMMIT_SHORT_SHA}"
  script: |
    # Construct a link to the build job's artifact JAR
    ASSET_URL="${CI_PROJECT_URL}/-/jobs/artifacts/${CI_COMMIT_BRANCH}/raw/${JAR_PATH}?job=build"
    echo "Asset URL: ${ASSET_URL}"

    # Create the release with release-cli (requires GITLAB_TOKEN with api scope)
    release-cli create \
      --name "Release ${TAG_NAME}" \
      --tag-name "${TAG_NAME}" \
      --ref "${CI_COMMIT_SHA}" \
      --description "Automated release for ${CI_COMMIT_SHORT_SHA}" \
      --assets-link '{"name":"gabia-dev-mcp-server-1.0.0.jar","url":"'"${ASSET_URL}"'"}'
